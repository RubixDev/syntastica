["as" "let" "panic" "todo" "use" "echo"]@keyword "type" @keyword.type "fn" @keyword.function "import" @keyword.import ["case" "if"]@keyword.conditional "assert" @keyword.exception ["(" ")" "<<" ">>" "[" "]" "{" "}"]@punctuation.bracket ["," "." ":" "->"]@punctuation.delimiter "#" @punctuation.special ["%" "&&" "*" "*." "+" "+." "-" "-." ".." "/" "/." "<" "<." "<=" "<=." "=" "==" ">" ">." ">=" ">=." "|>" "||"]@operator (identifier)@variable (comment)@comment [(module_comment)(statement_comment)]@comment.documentation [(discard)(hole)]@comment (module)@module (import alias: ((identifier)@module)?)(remote_type_identifier module: (identifier)@module)(unqualified_import name: (identifier)@function)(string)@string (bit_string_segment)@string.special (integer)@number (float)@number.float (function_call arguments: (arguments (argument label: (label)@label)))(function_parameter label: (label)? @label name: (identifier)@variable.parameter)(record arguments: (arguments (argument label: (label)@variable.member)?))(record_pattern_argument label: (label)@variable.member)(record_update_argument label: (label)@variable.member)(field_access record: (identifier)@variable field: (label)@variable.member)(data_constructor_argument (label)@variable.member)[(type_identifier)(type_parameter)(type_var)]@type ["const" "external" (opacity_modifier)(visibility_modifier)]@keyword.modifier (tuple_access index: (integer)@operator)(function name: (identifier)@function)(function_call function: (identifier)@function.call)(function_call function: (field_access field: (label)@function.call))(external_function name: (identifier)@function)(external_function_body (string)@module . (string)@function)(constructor_name)@type @constructor ([(type_identifier)(constructor_name)]@constant.builtin (#match? @constant.builtin "^(Ok|Error)$"))((constructor_name)@boolean (#match? @boolean "^(True|False)$"))(binary_expression operator: "|>" right: (identifier)@function)
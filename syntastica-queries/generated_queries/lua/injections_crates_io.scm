((function_call name: [(identifier)@_cdef_identifier (_ _ (identifier)@_cdef_identifier)]arguments: (arguments (string content: _ @injection.content)))(#set! injection.language "c")(#eq? @_cdef_identifier "cdef"))((function_call name: (_)@_vimcmd_identifier arguments: (arguments (string content: _ @injection.content)))(#set! injection.language "vim")(#match? @_vimcmd_identifier "^(vim\\.cmd|vim\\.api\\.nvim_command|vim\\.api\\.nvim_exec2)$"))((function_call name: (_)@_vimcmd_identifier arguments: (arguments (string content: _ @injection.content).))(#set! injection.language "query")(#match? @_vimcmd_identifier "^(vim\\.treesitter\\.query\\.set|vim\\.treesitter\\.query\\.parse)$"))((function_call name: (_)@_vimcmd_identifier arguments: (arguments . (_). (string content: _ @_method). (string content: _ @injection.content)))(#match? @_vimcmd_identifier "^(vim\\.rpcrequest|vim\\.rpcnotify)$")(#eq? @_method "nvim_exec_lua")(#set! injection.language "lua"))((function_call name: (identifier)@_function arguments: (arguments (string content: (string_content)@injection.content)))(#eq? @_function "exec_lua")(#set! injection.language "lua"))(function_call name: (_)@_vimcmd_identifier arguments: (arguments . (_). (table_constructor (field name: (identifier)@_command value: (string content: (_)@injection.content))).)(#eq? @_vimcmd_identifier "vim.api.nvim_create_autocmd")(#eq? @_command "command")(#set! injection.language "vim"))(function_call name: (_)@_user_cmd arguments: (arguments . (_). (string content: (_)@injection.content). (_).)(#eq? @_user_cmd "vim.api.nvim_create_user_command")(#set! injection.language "vim"))(function_call name: (_)@_user_cmd arguments: (arguments . (_). (_). (string content: (_)@injection.content). (_).)(#eq? @_user_cmd "vim.api.nvim_buf_create_user_command")(#set! injection.language "vim"))(function_call name: (_)@_map arguments: (arguments . (_). (_). (string content: (_)@injection.content))(#match? @_map "^(vim\\.api\\.nvim_set_keymap|vim\\.keymap\\.set)$")(#set! injection.language "vim"))(function_call name: (_)@_map arguments: (arguments . (_). (_). (_). (string content: (_)@injection.content). (_).)(#eq? @_map "vim.api.nvim_buf_set_keymap")(#set! injection.language "vim"))(string content: _ @injection.content (#match? @injection.content "^[ \\t\\n\\v\\f\\r]*;+[ \\t\\n\\v\\f\\r]?query")(#set! injection.language "query"))(comment content: (_)@injection.content (#match? @injection.content "^[-][[ \\t\\n\\v\\f\\r]]*[@\\|]")(#set! injection.language "luadoc")(#offset! @injection.content 0 1 0 0))(function_call (dot_index_expression field: (identifier)@_method (#match? @_method "^(find|match|gmatch|gsub)$"))arguments: (arguments . (_). (string content: (string_content)@injection.content (#set! injection.language "luap")(#set! injection.include-children))))(function_call (method_index_expression method: (identifier)@_method (#match? @_method "^(find|match|gmatch|gsub)$"))arguments: (arguments . (string content: (string_content)@injection.content (#set! injection.language "luap")(#set! injection.include-children))))((function_call (dot_index_expression field: (identifier)@_method)arguments: (arguments . (string (string_content)@injection.content)))(#eq? @_method "format")(#set! injection.language "printf"))((function_call (method_index_expression table: (_ (string (string_content)@injection.content))method: (identifier)@_method))(#eq? @_method "format")(#set! injection.language "printf"))(comment content: (_)@injection.content (#set! injection.language "comment"))((function_call name: (_)@_filetypeadd_identifier arguments: (arguments (table_constructor (field name: (_)@_pattern_key value: (table_constructor (field name: (string content: _ @injection.content)))))))(#set! injection.language "luap")(#eq? @_filetypeadd_identifier "vim.filetype.add")(#eq? @_pattern_key "pattern"))
(type_identifier)@type (type_spec name: (type_identifier)@type.definition)(field_identifier)@property (identifier)@variable (package_identifier)@module (parameter_declaration (identifier)@variable.parameter)(variadic_parameter_declaration (identifier)@variable.parameter)(label_name)@label (const_spec name: (identifier)@constant)(call_expression function: (identifier)@function.call)(call_expression function: (selector_expression field: (field_identifier)@function.method.call))(function_declaration name: (identifier)@function)(method_declaration name: (field_identifier)@function.method)(method_elem name: (field_identifier)@function.method)((call_expression (identifier)@constructor)(#match? @constructor "^[nN]ew[\\s\\S]+$"))((call_expression (identifier)@constructor)(#match? @constructor "^[mM]ake[\\s\\S]+$"))["--" "-" "-=" ":=" "!" "!=" "..." "*" "*" "*=" "/" "/=" "&" "&&" "&=" "&^" "&^=" "%" "%=" "^" "^=" "+" "++" "+=" "<-" "<" "<<" "<<=" "<=" "=" "==" ">" ">=" ">>" ">>=" "|" "|=" "||" "~"]@operator ["break" "const" "continue" "default" "defer" "goto" "range" "select" "var" "fallthrough"]@keyword ["type" "struct" "interface"]@keyword.type "func" @keyword.function "return" @keyword.return "go" @keyword.coroutine "for" @keyword.repeat ["import" "package"]@keyword.import ["else" "case" "switch" "if"]@keyword.conditional ["chan" "map"]@type.builtin ((type_identifier)@type.builtin (#match? @type.builtin "^(any|bool|byte|comparable|complex128|complex64|error|float32|float64|int|int16|int32|int64|int8|rune|string|uint|uint16|uint32|uint64|uint8|uintptr)$"))((identifier)@function.builtin (#match? @function.builtin "^(append|cap|clear|close|complex|copy|delete|imag|len|make|max|min|new|panic|print|println|real|recover)$"))"." @punctuation.delimiter "," @punctuation.delimiter ":" @punctuation.delimiter ";" @punctuation.delimiter "(" @punctuation.bracket ")" @punctuation.bracket "{" @punctuation.bracket "}" @punctuation.bracket "[" @punctuation.bracket "]" @punctuation.bracket (interpreted_string_literal)@string (raw_string_literal)@string (rune_literal)@string (escape_sequence)@string.escape (int_literal)@number (float_literal)@number.float (imaginary_literal)@number [(true)(false)]@boolean [(nil)(iota)]@constant.builtin (keyed_element . (literal_element (identifier)@variable.member))(field_declaration name: (field_identifier)@variable.member)(comment)@comment (source_file . (comment)+ @comment.documentation)(source_file (comment)+ @comment.documentation . (const_declaration))(source_file (comment)+ @comment.documentation . (function_declaration))(source_file (comment)+ @comment.documentation . (type_declaration))(source_file (comment)+ @comment.documentation . (var_declaration))(call_expression (selector_expression)@_function (#match? @_function "^(regexp\\.Match|regexp\\.MatchReader|regexp\\.MatchString|regexp\\.Compile|regexp\\.CompilePOSIX|regexp\\.MustCompile|regexp\\.MustCompilePOSIX)$")(argument_list . [(raw_string_literal (raw_string_literal_content)@string.regexp)(interpreted_string_literal (interpreted_string_literal_content)@string.regexp)]))
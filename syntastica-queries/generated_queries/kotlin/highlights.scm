(simple_identifier)@variable ((simple_identifier)@variable.builtin (#eq? @variable.builtin "it"))((simple_identifier)@variable.builtin (#eq? @variable.builtin "field"))["this" "super" "this@" "super@"]@variable.builtin (super_expression "@" @variable.builtin)(class_parameter (simple_identifier)@variable.member)(_ (navigation_suffix (simple_identifier)@variable.member))((simple_identifier)@constant (#match? @constant "^[A-Z][A-Z0-9_]*$"))(_ (navigation_suffix (simple_identifier)@constant (#match? @constant "^[A-Z][A-Z0-9_]*$")))(enum_entry (simple_identifier)@constant)(type_identifier)@type (nullable_type)@punctuation.special (type_alias (type_identifier)@type.definition)((type_identifier)@type.builtin (#match? @type.builtin "^(Byte|Short|Int|Long|UByte|UShort|UInt|ULong|Float|Double|Boolean|Char|String|Array|ByteArray|ShortArray|IntArray|LongArray|UByteArray|UShortArray|UIntArray|ULongArray|FloatArray|DoubleArray|BooleanArray|CharArray|Map|Set|List|EmptyMap|EmptySet|EmptyList|MutableMap|MutableSet|MutableList)$"))(package_header "package" @keyword . (identifier (simple_identifier)@module))(import_header "import" @keyword.import)(wildcard_import)@character.special (import_header (identifier (simple_identifier)@type @_import)(import_alias (type_identifier)@type.definition)? (#match? @_import "^[A-Z]"))(import_header (identifier (simple_identifier)@function @_import .)(import_alias (type_identifier)@function)? (#match? @_import "^[a-z]"))(label)@label (function_declaration (simple_identifier)@function)(getter "get" @function.builtin)(setter "set" @function.builtin)(primary_constructor)@constructor (secondary_constructor "constructor" @constructor)(constructor_invocation (user_type (type_identifier)@constructor))(anonymous_initializer "init" @constructor)(parameter (simple_identifier)@variable.parameter)(parameter_with_optional_type (simple_identifier)@variable.parameter)(lambda_literal (lambda_parameters (variable_declaration (simple_identifier)@variable.parameter)))(call_expression . (simple_identifier)@function.call)(callable_reference . (simple_identifier)@function.call)(call_expression (navigation_expression (navigation_suffix (simple_identifier)@function.call).))(call_expression . (simple_identifier)@function.builtin (#match? @function.builtin "^(arrayOf|arrayOfNulls|byteArrayOf|shortArrayOf|intArrayOf|longArrayOf|ubyteArrayOf|ushortArrayOf|uintArrayOf|ulongArrayOf|floatArrayOf|doubleArrayOf|booleanArrayOf|charArrayOf|emptyArray|mapOf|setOf|listOf|emptyMap|emptySet|emptyList|mutableMapOf|mutableSetOf|mutableListOf|print|println|error|TODO|run|runCatching|repeat|lazy|lazyOf|enumValues|enumValueOf|assert|check|checkNotNull|require|requireNotNull|with|suspend|synchronized)$"))[(line_comment)(multiline_comment)]@comment ((multiline_comment)@comment.documentation (#match? @comment.documentation "^\\/[\\*][\\*][^\\*][\\s\\S]*[\\*]\\/$"))(shebang_line)@keyword.directive (real_literal)@number.float [(integer_literal)(long_literal)(hex_literal)(bin_literal)(unsigned_literal)]@number [(null_literal)(boolean_literal)]@boolean (character_literal)@character (string_literal)@string (character_literal (character_escape_seq)@string.escape)(call_expression (navigation_expression (string_literal)@string.regexp (navigation_suffix ((simple_identifier)@_function (#eq? @_function "toRegex")))))(call_expression ((simple_identifier)@_function (#eq? @_function "Regex"))(call_suffix (value_arguments (value_argument (string_literal)@string.regexp))))(call_expression (navigation_expression ((simple_identifier)@_class (#eq? @_class "Regex"))(navigation_suffix ((simple_identifier)@_function (#eq? @_function "fromLiteral"))))(call_suffix (value_arguments (value_argument (string_literal)@string.regexp))))(type_alias "typealias" @keyword)(companion_object "companion" @keyword)[(class_modifier)(member_modifier)(function_modifier)(property_modifier)(platform_modifier)(variance_modifier)(parameter_modifier)(visibility_modifier)(reification_modifier)(inheritance_modifier)]@keyword.modifier ["val" "var"]@keyword ["enum" "class" "object" "interface"]@keyword.type ["return" "return@"]@keyword.return "suspend" @keyword.coroutine "fun" @keyword.function ["if" "else" "when"]@keyword.conditional ["for" "do" "while" "continue" "continue@" "break" "break@"]@keyword.repeat ["try" "catch" "throw" "finally"]@keyword.exception (annotation "@" @attribute (use_site_target)? @attribute)(annotation (user_type (type_identifier)@attribute))(annotation (constructor_invocation (user_type (type_identifier)@attribute)))(file_annotation "@" @attribute "file" @attribute ":" @attribute)(file_annotation (user_type (type_identifier)@attribute))(file_annotation (constructor_invocation (user_type (type_identifier)@attribute)))["!" "!=" "!==" "=" "==" "===" ">" ">=" "<" "<=" "||" "&&" "+" "++" "+=" "-" "--" "-=" "*" "*=" "/" "/=" "%" "%=" "?." "?:" "!!" "is" "!is" "in" "!in" "as" "as?" ".." "->"]@operator ["(" ")" "[" "]" "{" "}"]@punctuation.bracket ["." "," ";" ":" "::"]@punctuation.delimiter (super_expression ["<" ">"]@punctuation.delimiter)(type_arguments ["<" ">"]@punctuation.delimiter)(type_parameters ["<" ">"]@punctuation.delimiter)(string_literal "$" @punctuation.special (interpolated_identifier)@none @variable)(string_literal "${" @punctuation.special (interpolated_expression)@none "}" @punctuation.special)
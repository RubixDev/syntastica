(macro_invocation macro: [(scoped_identifier name: (_)@_macro_name)(identifier)@_macro_name](token_tree)@injection.content (#not-match? @_macro_name "^(slint|html|json)$")(#set! injection.language "rust")(#set! injection.include-children))(macro_invocation macro: [(scoped_identifier name: (_)@injection.language)(identifier)@injection.language](token_tree)@injection.content (#match? @injection.language "^(slint|html|json)$")(#offset! @injection.content 0 1 0 -1)(#set! injection.include-children))(macro_definition (macro_rule left: (token_tree_pattern)@injection.content (#set! injection.language "rust")))(macro_definition (macro_rule right: (token_tree)@injection.content (#set! injection.language "rust")))([(line_comment)(block_comment)]@injection.content (#set! injection.language "comment"))(call_expression function: (scoped_identifier path: (identifier)@_regex (#match? @_regex "^(Regex|RegexBuilder)$")name: (identifier)@_new (#eq? @_new "new"))arguments: (arguments (raw_string_literal (string_content)@injection.content))(#set! injection.language "regex"))(call_expression function: (scoped_identifier path: (scoped_identifier (identifier)@_regex (#match? @_regex "^(Regex|RegexBuilder)$").)name: (identifier)@_new (#eq? @_new "new"))arguments: (arguments (raw_string_literal (string_content)@injection.content))(#set! injection.language "regex"))(call_expression function: (scoped_identifier path: (identifier)@_regex (#match? @_regex "^(RegexSet|RegexSetBuilder)$")name: (identifier)@_new (#eq? @_new "new"))arguments: (arguments (array_expression (raw_string_literal (string_content)@injection.content)))(#set! injection.language "regex"))(call_expression function: (scoped_identifier path: (scoped_identifier (identifier)@_regex (#match? @_regex "^(RegexSet|RegexSetBuilder)$").)name: (identifier)@_new (#eq? @_new "new"))arguments: (arguments (array_expression (raw_string_literal (string_content)@injection.content)))(#set! injection.language "regex"))((block_comment)@injection.content (#match? @injection.content "/\\*!([a-zA-Z]+:)?re2c")(#set! injection.language "re2c"))(macro_invocation macro: (scoped_identifier path: (identifier)@_sqlx (#eq? @_sqlx "sqlx")name: (identifier)@_query (#match? @_query "^query(_scalar|_scalar_unchecked)?$"))(token_tree . [(string_literal)(raw_string_literal)]@injection.content)(#set! injection.language "sql"))(macro_invocation macro: (scoped_identifier path: (identifier)@_sqlx (#eq? @_sqlx "sqlx")name: (identifier)@_query_as (#match? @_query_as "^query_as(_unchecked)?$"))(token_tree . (_)[(string_literal)(raw_string_literal)]@injection.content)(#set! injection.language "sql"))(macro_invocation macro: ((identifier)@_regex_macro (#match? @_regex_macro "^(lazy_)?regex|regex_(captures|find|is_match|replace(_all)?)$"))(token_tree [(line_comment)(block_comment)]* . (raw_string_literal (string_content)@injection.content))(#set! injection.language "regex"))
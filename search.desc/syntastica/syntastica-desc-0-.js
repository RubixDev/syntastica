searchState.loadedDescShard("syntastica", 0, "<code>syntastica</code>\nA custom error which may be returned by external crates if …\nContains the error value\nThe main error type.\nHighlighting failed, usually because of tree-sitter …\nSource code with theme-independent style information …\nA <code>Theme</code> contains a color with an invalid hex literal.\nA <code>Theme</code> contained a link to a non-existent key.\nThe provided queries were malformed or not applicable to …\nA <code>LanguageSet</code> did not provide queries for a provided …\nContains the success value\nA type for easy reuse of resources when highlighting …\nThe main result type.\nSource code with theme-specific style information attached.\nThe requested language is not supported by the current …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience function for processing and directly rendering …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the <code>LanguageSet</code> trait and some related types.\nCreate a new <code>Processor</code> given a <code>LanguageSet</code>.\nProcess the given <code>code</code> using the language specified by …\nCreate a temporary <code>Processor</code> and run <code>process</code> once.\nProcess the given <code>code</code> using the language specified by …\nThis module contains the <code>Renderer</code> trait and two …\nDefines the <code>Style</code> and <code>Color</code> types used by <code>ResolvedTheme</code>s.\nDefines items related to theming the output.\nConvenience macro for constructing new <code>Theme</code>s.\n(De)serialized as <code>a2ps</code>.\n(De)serialized as <code>a65</code>.\n(De)serialized as <code>aap</code>.\n(De)serialized as <code>abap</code>.\n(De)serialized as <code>abaqus</code>.\n(De)serialized as <code>abc</code>.\n(De)serialized as <code>abel</code>.\n(De)serialized as <code>acedb</code>.\n(De)serialized as <code>ada</code>.\n(De)serialized as <code>ahdl</code>.\n(De)serialized as <code>aidl</code>.\n(De)serialized as <code>alsaconf</code>.\n(De)serialized as <code>aml</code>.\n(De)serialized as <code>ampl</code>.\n(De)serialized as <code>ant</code>.\n(De)serialized as <code>apache</code>.\n(De)serialized as <code>apachestyle</code>.\n(De)serialized as <code>applescript</code>.\n(De)serialized as <code>aptconf</code>.\n(De)serialized as <code>arch</code>.\n(De)serialized as <code>arduino</code>.\n(De)serialized as <code>art</code>.\n(De)serialized as <code>asciidoc</code>.\n(De)serialized as <code>asm</code>.\n(De)serialized as <code>asn</code>.\n(De)serialized as <code>aspperl</code>.\n(De)serialized as <code>aspvbs</code>.\n(De)serialized as <code>asterisk</code>.\n(De)serialized as <code>asteriskvm</code>, <strong>not</strong> <code>asteriskvoicemail</code>.\n(De)serialized as <code>astro</code>.\n(De)serialized as <code>atlas</code>.\n(De)serialized as <code>autohotkey</code>.\n(De)serialized as <code>autoit</code>.\n(De)serialized as <code>automake</code>.\n(De)serialized as <code>ave</code>.\n(De)serialized as <code>awk</code>.\n(De)serialized as <code>b</code>.\n(De)serialized as <code>bash</code>.\n(De)serialized as <code>basic</code>.\n(De)serialized as <code>bass</code>.\n(De)serialized as <code>bat</code>.\n(De)serialized as <code>bc</code>.\n(De)serialized as <code>bdf</code>.\n(De)serialized as <code>beancount</code>.\n(De)serialized as <code>bib</code>.\n(De)serialized as <code>bicep</code>.\n(De)serialized as <code>bindzone</code>.\n(De)serialized as <code>bitbake</code>.\n(De)serialized as <code>blank</code>.\n(De)serialized as <code>blueprint</code>.\n(De)serialized as <code>bsdl</code>.\n(De)serialized as <code>bst</code>.\n(De)serialized as <code>btm</code>.\n(De)serialized as <code>bzl</code>.\n(De)serialized as <code>bzr</code>.\n(De)serialized as <code>c</code>.\n(De)serialized as <code>cmake</code>.\n(De)serialized as <code>cmod</code>.\n(De)serialized as <code>csharp</code>.\n(De)serialized as <code>cterm</code>.\n(De)serialized as <code>cabal</code>.\n(De)serialized as <code>cabalconfig</code>.\n(De)serialized as <code>cabalproject</code>.\n(De)serialized as <code>cairo</code>.\n(De)serialized as <code>calendar</code>.\n(De)serialized as <code>capnp</code>.\n(De)serialized as <code>catalog</code>.\n(De)serialized as <code>cdc</code>.\n(De)serialized as <code>cdl</code>.\n(De)serialized as <code>cdrdaoconf</code>.\n(De)serialized as <code>cdrtoc</code>.\n(De)serialized as <code>cf</code>.\n(De)serialized as <code>cfengine</code>.\n(De)serialized as <code>cfg</code>.\n(De)serialized as <code>ch</code>.\n(De)serialized as <code>chaiscript</code>.\n(De)serialized as <code>change</code>.\n(De)serialized as <code>changelog</code>.\n(De)serialized as <code>chaskell</code>.\n(De)serialized as <code>chatito</code>.\n(De)serialized as <code>chill</code>.\n(De)serialized as <code>chordpro</code>.\n(De)serialized as <code>cl</code>.\n(De)serialized as <code>clean</code>.\n(De)serialized as <code>clipper</code>.\n(De)serialized as <code>clojure</code>.\n(De)serialized as <code>cmusrc</code>.\n(De)serialized as <code>cobol</code>.\n(De)serialized as <code>coco</code>.\n(De)serialized as <code>conaryrecipe</code>.\n(De)serialized as <code>conf</code>.\n(De)serialized as <code>confini</code>.\n(De)serialized as <code>config</code>.\n(De)serialized as <code>context</code>.\n(De)serialized as <code>cook</code>.\n(De)serialized as <code>coq</code>.\n(De)serialized as <code>corn</code>.\n(De)serialized as <code>cpon</code>.\n(De)serialized as <code>cpp</code>.\n(De)serialized as <code>cqlang</code>.\n(De)serialized as <code>crm</code>.\n(De)serialized as <code>crontab</code>.\n(De)serialized as <code>crystal</code>.\n(De)serialized as <code>csc</code>.\n(De)serialized as <code>csdl</code>.\n(De)serialized as <code>csh</code>.\n(De)serialized as <code>csp</code>.\n(De)serialized as <code>css</code>.\n(De)serialized as <code>csv</code>.\n(De)serialized as <code>cucumber</code>.\n(De)serialized as <code>cuda</code>.\n(De)serialized as <code>cue</code>.\n(De)serialized as <code>cupl</code>.\n(De)serialized as <code>cuplsim</code>.\n(De)serialized as <code>cvs</code>.\n(De)serialized as <code>cvsrc</code>.\n(De)serialized as <code>cweb</code>.\n(De)serialized as <code>cynpp</code>.\n(De)serialized as <code>d</code>.\n(De)serialized as <code>dtrace</code>.\n(De)serialized as <code>dart</code>.\n(De)serialized as <code>datascript</code>.\n(De)serialized as <code>dcd</code>.\n(De)serialized as <code>dcl</code>.\n(De)serialized as <code>debchangelog</code>.\n(De)serialized as <code>debcontrol</code>.\n(De)serialized as <code>debcopyright</code>.\n(De)serialized as <code>debsources</code>.\n(De)serialized as <code>def</code>.\n(De)serialized as <code>denyhosts</code>.\n(De)serialized as <code>dep3patch</code>.\n(De)serialized as <code>desc</code>.\n(De)serialized as <code>desktop</code>.\n(De)serialized as <code>dhall</code>.\n(De)serialized as <code>dictconf</code>.\n(De)serialized as <code>dictdconf</code>.\n(De)serialized as <code>diff</code>.\n(De)serialized as <code>dircolors</code>.\n(De)serialized as <code>diva</code>.\n(De)serialized as <code>dnsmasq</code>.\n(De)serialized as <code>docbk-sgml-4</code>, <strong>not</strong> <code>docbooksgml4</code>.\n(De)serialized as <code>docbk-xml-4</code>, <strong>not</strong> <code>docbookxml4</code>.\n(De)serialized as <code>docbk-xml-5</code>, <strong>not</strong> <code>docbookxml5</code>.\n(De)serialized as <code>dockerfile</code>.\n(De)serialized as <code>dosbatch</code>.\n(De)serialized as <code>dosini</code>.\n(De)serialized as <code>dot</code>.\n(De)serialized as <code>dracula</code>.\n(De)serialized as <code>dsl</code>.\n(De)serialized as <code>dtd</code>.\n(De)serialized as <code>dts</code>.\n(De)serialized as <code>dune</code>.\n(De)serialized as <code>dylan</code>.\n(De)serialized as <code>dylanintr</code>.\n(De)serialized as <code>dylanlid</code>.\n(De)serialized as <code>eelixir</code>.\n(De)serialized as <code>ejavascript</code>.\n(De)serialized as <code>elinks</code>.\n(De)serialized as <code>epuppet</code>.\n(De)serialized as <code>eruby</code>.\n(De)serialized as <code>ebnf</code>.\n(De)serialized as <code>ecd</code>.\n(De)serialized as <code>edif</code>.\n(De)serialized as <code>editorconfig</code>.\n(De)serialized as <code>eiffel</code>.\n(De)serialized as <code>eighth</code>.\nEither one of two language types.\n(De)serialized as <code>elf</code>.\n(De)serialized as <code>elixir</code>.\n(De)serialized as <code>elm</code>.\n(De)serialized as <code>elmfilt</code>.\n(De)serialized as <code>elsa</code>.\n(De)serialized as <code>elvish</code>.\n(De)serialized as <code>erlang</code>.\n(De)serialized as <code>esdl</code>.\n(De)serialized as <code>esmtprc</code>.\n(De)serialized as <code>esqlc</code>.\n(De)serialized as <code>esterel</code>.\n(De)serialized as <code>eterm</code>.\n(De)serialized as <code>euphoria3</code>.\n(De)serialized as <code>exim</code>.\n(De)serialized as <code>expect</code>.\n(De)serialized as <code>exports</code>.\n(De)serialized as <code>fsharp</code>.\n(De)serialized as <code>factor</code>.\n(De)serialized as <code>falcon</code>.\n(De)serialized as <code>fan</code>.\n(De)serialized as <code>fennel</code>.\n(De)serialized as <code>fetchmail</code>.\n(De)serialized as <code>fgl</code>.\nA non-exhaustive list of text file types.\n(De)serialized as <code>firrtl</code>.\n(De)serialized as <code>fish</code>.\n(De)serialized as <code>foam</code>.\n(De)serialized as <code>focexec</code>.\n(De)serialized as <code>form</code>.\n(De)serialized as <code>forth</code>.\n(De)serialized as <code>fortran</code>.\n(De)serialized as <code>fpcmake</code>.\n(De)serialized as <code>framescript</code>.\n(De)serialized as <code>freebasic</code>.\n(De)serialized as <code>fstab</code>.\n(De)serialized as <code>fsh</code>.\n(De)serialized as <code>func</code>.\n(De)serialized as <code>fusion</code>.\n(De)serialized as <code>fvwm</code>.\n(De)serialized as <code>fvwm-1</code>, <strong>not</strong> <code>fvwm1</code>.\n(De)serialized as <code>fvwm-2</code>, <strong>not</strong> <code>fvwm2</code>.\n(De)serialized as <code>fvwm2m4</code>.\n(De)serialized as <code>gdresource</code>.\n(De)serialized as <code>gdscript</code>.\n(De)serialized as <code>gdshader</code>.\n(De)serialized as <code>gdb</code>.\n(De)serialized as <code>gdmo</code>.\n(De)serialized as <code>gedcom</code>.\n(De)serialized as <code>gemtext</code>.\n(De)serialized as <code>gift</code>.\n(De)serialized as <code>git</code>.\n(De)serialized as <code>gitattributes</code>.\n(De)serialized as <code>gitcommit</code>.\n(De)serialized as <code>gitconfig</code>.\n(De)serialized as <code>gitignore</code>.\n(De)serialized as <code>gitolite</code>.\n(De)serialized as <code>gitrebase</code>.\n(De)serialized as <code>gitsendemail</code>.\n(De)serialized as <code>gkrellmrc</code>.\n(De)serialized as <code>gleam</code>.\n(De)serialized as <code>glsl</code>.\n(De)serialized as <code>gnash</code>.\n(De)serialized as <code>gnuplot</code>.\n(De)serialized as <code>go</code>.\n(De)serialized as <code>gomod</code>.\n(De)serialized as <code>gosum</code>.\n(De)serialized as <code>gowork</code>.\n(De)serialized as <code>gp</code>.\n(De)serialized as <code>gpg</code>.\n(De)serialized as <code>grads</code>.\n(De)serialized as <code>graphql</code>.\n(De)serialized as <code>gretl</code>.\n(De)serialized as <code>groovy</code>.\n(De)serialized as <code>group</code>.\n(De)serialized as <code>grub</code>.\n(De)serialized as <code>gsp</code>.\n(De)serialized as <code>gtkrc</code>.\n(De)serialized as <code>gyp</code>.\n(De)serialized as <code>hjson</code>.\n(De)serialized as <code>hack</code>.\n(De)serialized as <code>haml</code>.\n(De)serialized as <code>hamster</code>.\n(De)serialized as <code>handlebars</code>.\n(De)serialized as <code>hare</code>.\n(De)serialized as <code>haskell</code>.\n(De)serialized as <code>haste</code>.\n(De)serialized as <code>hastepreproc</code>.\n(De)serialized as <code>hb</code>.\n(De)serialized as <code>hcl</code>.\n(De)serialized as <code>heex</code>.\n(De)serialized as <code>hercules</code>.\n(De)serialized as <code>hex</code>.\n(De)serialized as <code>hexdump</code>.\n(De)serialized as <code>hgcommit</code>.\nContains the data needed to highlight code written in a …\n(De)serialized as <code>hlsplaylist</code>.\n(De)serialized as <code>hog</code>.\n(De)serialized as <code>hollywood</code>.\n(De)serialized as <code>hoon</code>.\n(De)serialized as <code>hostconf</code>.\n(De)serialized as <code>hostsaccess</code>.\n(De)serialized as <code>httest</code>.\n(De)serialized as <code>html</code>.\n(De)serialized as <code>htmldjango</code>.\n(De)serialized as <code>htmlm4</code>.\n(De)serialized as <code>i3config</code>.\n(De)serialized as <code>ibasic</code>.\n(De)serialized as <code>icemenu</code>.\n(De)serialized as <code>icon</code>.\n(De)serialized as <code>idl</code>.\n(De)serialized as <code>idlang</code>.\n(De)serialized as <code>indent</code>.\n(De)serialized as <code>inform</code>.\n(De)serialized as <code>inittab</code>.\n(De)serialized as <code>initng</code>.\n(De)serialized as <code>installshield</code>.\n(De)serialized as <code>ipfilter</code>.\n(De)serialized as <code>iss</code>.\n(De)serialized as <code>ist</code>.\n(De)serialized as <code>j</code>.\n(De)serialized as <code>jgraph</code>.\n(De)serialized as <code>jproperties</code>.\n(De)serialized as <code>jal</code>.\n(De)serialized as <code>jam</code>.\n(De)serialized as <code>java</code>.\n(De)serialized as <code>javacc</code>.\n(De)serialized as <code>javascript</code>.\n(De)serialized as <code>javascript.glimmer</code>, <strong>not</strong> <code>javascriptglimmer</code>…\n(De)serialized as <code>jess</code>.\n(De)serialized as <code>jovial</code>.\n(De)serialized as <code>jq</code>.\n(De)serialized as <code>json</code>.\n(De)serialized as <code>json5</code>.\n(De)serialized as <code>jsonc</code>.\n(De)serialized as <code>jsonl</code>.\n(De)serialized as <code>jsonnet</code>.\n(De)serialized as <code>jsp</code>.\n(De)serialized as <code>jsx</code>.\n(De)serialized as <code>julia</code>.\n(De)serialized as <code>kconfig</code>.\n(De)serialized as <code>kscript</code>.\n(De)serialized as <code>kdl</code>.\n(De)serialized as <code>kivy</code>.\n(De)serialized as <code>kix</code>.\n(De)serialized as <code>kotlin</code>.\n(De)serialized as <code>krl</code>.\n(De)serialized as <code>ksh</code>.\n(De)serialized as <code>kwt</code>.\n(De)serialized as <code>lhaskell</code>.\n(De)serialized as <code>lace</code>.\n(De)serialized as <code>lambdaprolog</code>.\nAn opaque object that defines how to parse a particular …\nA type identifying a language that is included in this set.\nDescribes a type that is able to provide tree-sitter …\n(De)serialized as <code>larch</code>.\n(De)serialized as <code>latte</code>.\n(De)serialized as <code>ld</code>.\n(De)serialized as <code>ldif</code>.\n(De)serialized as <code>lean</code>.\n(De)serialized as <code>ledger</code>.\nA language of the left set.\n(De)serialized as <code>less</code>.\n(De)serialized as <code>lex</code>.\n(De)serialized as <code>lftp</code>.\n(De)serialized as <code>libao</code>.\n(De)serialized as <code>lilo</code>.\n(De)serialized as <code>lilypond</code>.\n(De)serialized as <code>limits</code>.\n(De)serialized as <code>liquid</code>.\n(De)serialized as <code>lisp</code>.\n(De)serialized as <code>lite</code>.\n(De)serialized as <code>litestep</code>.\n(De)serialized as <code>livebook</code>.\n(De)serialized as <code>llvm</code>.\n(De)serialized as <code>logcheck</code>.\n(De)serialized as <code>loginaccess</code>.\n(De)serialized as <code>logindefs</code>.\n(De)serialized as <code>logtalk</code>.\n(De)serialized as <code>lotos</code>.\n(De)serialized as <code>lout</code>.\n(De)serialized as <code>lpc</code>.\n(De)serialized as <code>lsl</code>.\n(De)serialized as <code>lss</code>.\n(De)serialized as <code>lua</code>.\n(De)serialized as <code>luau</code>.\n(De)serialized as <code>lynx</code>.\n(De)serialized as <code>lyrics</code>.\n(De)serialized as <code>m3build</code>.\n(De)serialized as <code>m3quake</code>.\n(De)serialized as <code>m4</code>.\n(De)serialized as <code>mplayerconf</code>.\n(De)serialized as <code>mail</code>.\n(De)serialized as <code>mailaliases</code>.\n(De)serialized as <code>mailcap</code>.\n(De)serialized as <code>make</code>.\n(De)serialized as <code>mallard</code>.\n(De)serialized as <code>manconf</code>.\n(De)serialized as <code>map</code>.\n(De)serialized as <code>maple</code>.\n(De)serialized as <code>markdown</code>.\n(De)serialized as <code>mason</code>.\n(De)serialized as <code>master</code>.\n(De)serialized as <code>matlab</code>.\n(De)serialized as <code>maxima</code>.\n(De)serialized as <code>mel</code>.\n(De)serialized as <code>mermaid</code>.\n(De)serialized as <code>meson</code>.\n(De)serialized as <code>messages</code>.\n(De)serialized as <code>mf</code>.\n(De)serialized as <code>mgl</code>.\n(De)serialized as <code>mgp</code>.\n(De)serialized as <code>mib</code>.\n(De)serialized as <code>mix</code>.\n(De)serialized as <code>mma</code>.\n(De)serialized as <code>mmix</code>.\n(De)serialized as <code>mmp</code>.\n(De)serialized as <code>modconf</code>.\n(De)serialized as <code>modsim3</code>.\n(De)serialized as <code>modula2</code>.\n(De)serialized as <code>modula3</code>.\n(De)serialized as <code>monk</code>.\n(De)serialized as <code>moo</code>.\n(De)serialized as <code>moonscript</code>.\n(De)serialized as <code>move</code>.\n(De)serialized as <code>mp</code>.\n(De)serialized as <code>mp-metafun</code>, <strong>not</strong> <code>mpmetafun</code>.\n(De)serialized as <code>mrxvtrc</code>.\n(De)serialized as <code>msmessages</code>.\n(De)serialized as <code>msidl</code>.\n(De)serialized as <code>msql</code>.\n(De)serialized as <code>mupad</code>.\n(De)serialized as <code>murphi</code>.\n(De)serialized as <code>mush</code>.\n(De)serialized as <code>muttrc</code>.\n(De)serialized as <code>mysql</code>.\n(De)serialized as <code>n1ql</code>.\n(De)serialized as <code>named</code>.\n(De)serialized as <code>nanorc</code>.\n(De)serialized as <code>natural</code>.\n(De)serialized as <code>ncf</code>.\n(De)serialized as <code>neomuttrc</code>.\n(De)serialized as <code>netrc</code>.\n(De)serialized as <code>nginx</code>.\n(De)serialized as <code>nim</code>.\n(De)serialized as <code>ninja</code>.\n(De)serialized as <code>nix</code>.\n(De)serialized as <code>nqc</code>.\n(De)serialized as <code>nroff</code>.\n(De)serialized as <code>nsis</code>.\n(De)serialized as <code>nu</code>.\n(De)serialized as <code>ocaml</code>.\n(De)serialized as <code>ocamlinterface</code>.\n(De)serialized as <code>obj</code>.\n(De)serialized as <code>objc</code>.\n(De)serialized as <code>objcpp</code>.\n(De)serialized as <code>obse</code>.\n(De)serialized as <code>occam</code>.\n(De)serialized as <code>octave</code>.\n(De)serialized as <code>odin</code>.\n(De)serialized as <code>omnimark</code>.\n(De)serialized as <code>opam</code>.\n(De)serialized as <code>openroad</code>.\n(De)serialized as <code>openscad</code>.\n(De)serialized as <code>openvpn</code>.\n(De)serialized as <code>opl</code>.\n(De)serialized as <code>ora</code>.\n(De)serialized as <code>org</code>.\n(De)serialized as <code>pinfo</code>.\n(De)serialized as <code>pamconf</code>.\n(De)serialized as <code>pamenv</code>.\n(De)serialized as <code>papp</code>.\n(De)serialized as <code>pascal</code>.\n(De)serialized as <code>passwd</code>.\n(De)serialized as <code>pbtxt</code>.\n(De)serialized as <code>pccts</code>.\n(De)serialized as <code>pcmk</code>.\n(De)serialized as <code>pdf</code>.\n(De)serialized as <code>pem</code>.\n(De)serialized as <code>perl</code>.\n(De)serialized as <code>pf</code>.\n(De)serialized as <code>pfmain</code>.\n(De)serialized as <code>php</code>.\n(De)serialized as <code>pike</code>.\n(De)serialized as <code>pilrc</code>.\n(De)serialized as <code>pine</code>.\n(De)serialized as <code>plaintex</code>.\n(De)serialized as <code>pli</code>.\n(De)serialized as <code>plm</code>.\n(De)serialized as <code>plp</code>.\n(De)serialized as <code>plsql</code>.\n(De)serialized as <code>po</code>.\n(De)serialized as <code>pod</code>.\n(De)serialized as <code>poefilter</code>.\n(De)serialized as <code>poke</code>.\n(De)serialized as <code>pony</code>.\n(De)serialized as <code>postscr</code>.\n(De)serialized as <code>pov</code>.\n(De)serialized as <code>povini</code>.\n(De)serialized as <code>ppd</code>.\n(De)serialized as <code>ppwiz</code>.\n(De)serialized as <code>prisma</code>.\n(De)serialized as <code>privoxy</code>.\n(De)serialized as <code>proc</code>.\n(De)serialized as <code>procmail</code>.\n(De)serialized as <code>progress</code>.\n(De)serialized as <code>prolog</code>.\n(De)serialized as <code>promela</code>.\n(De)serialized as <code>proto</code>.\n(De)serialized as <code>protocols</code>.\n(De)serialized as <code>prql</code>.\n(De)serialized as <code>ps1</code>.\n(De)serialized as <code>ps1xml</code>.\n(De)serialized as <code>psf</code>.\n(De)serialized as <code>psl</code>.\n(De)serialized as <code>ptcap-print</code>, <strong>not</strong> <code>ptcapprint</code>.\n(De)serialized as <code>ptcap-term</code>, <strong>not</strong> <code>ptcapterm</code>.\n(De)serialized as <code>pug</code>.\n(De)serialized as <code>puppet</code>.\n(De)serialized as <code>pyret</code>.\n(De)serialized as <code>pyrex</code>.\n(De)serialized as <code>python</code>.\n(De)serialized as <code>qb64</code>.\n(De)serialized as <code>ql</code>.\n(De)serialized as <code>qmldir</code>.\n(De)serialized as <code>quake</code>.\n(De)serialized as <code>quarto</code>.\n(De)serialized as <code>r</code>.\n(De)serialized as <code>rhelp</code>.\n(De)serialized as <code>racc</code>.\n(De)serialized as <code>racket</code>.\n(De)serialized as <code>radiance</code>.\n(De)serialized as <code>raku</code>.\n(De)serialized as <code>raml</code>.\n(De)serialized as <code>rapid</code>.\n(De)serialized as <code>ratpoison</code>.\n(De)serialized as <code>rbs</code>.\n(De)serialized as <code>rc</code>.\n(De)serialized as <code>rcs</code>.\n(De)serialized as <code>rescript</code>.\n(De)serialized as <code>readline</code>.\n(De)serialized as <code>rebol</code>.\n(De)serialized as <code>redif</code>.\n(De)serialized as <code>registry</code>.\n(De)serialized as <code>rego</code>.\n(De)serialized as <code>remind</code>.\n(De)serialized as <code>resolv</code>.\n(De)serialized as <code>reva</code>.\n(De)serialized as <code>rexx</code>.\n(De)serialized as <code>rib</code>.\nA language of the right set.\n(De)serialized as <code>rmd</code>.\n(De)serialized as <code>rnc</code>.\n(De)serialized as <code>rng</code>.\n(De)serialized as <code>rnoweb</code>.\n(De)serialized as <code>robot</code>.\n(De)serialized as <code>robots</code>.\n(De)serialized as <code>ron</code>.\n(De)serialized as <code>routeros</code>.\n(De)serialized as <code>rpcgen</code>.\n(De)serialized as <code>rpgle</code>.\n(De)serialized as <code>rpl</code>.\n(De)serialized as <code>rrst</code>.\n(De)serialized as <code>rst</code>.\n(De)serialized as <code>rtf</code>.\n(De)serialized as <code>ruby</code>.\n(De)serialized as <code>rush</code>.\n(De)serialized as <code>rust</code>.\n(De)serialized as <code>sage</code>.\n(De)serialized as <code>samba</code>.\n(De)serialized as <code>sas</code>.\n(De)serialized as <code>sass</code>.\n(De)serialized as <code>sather</code>.\n(De)serialized as <code>sbt</code>.\n(De)serialized as <code>scala</code>.\n(De)serialized as <code>scdoc</code>.\n(De)serialized as <code>scheme</code>.\n(De)serialized as <code>scilab</code>.\n(De)serialized as <code>screen</code>.\n(De)serialized as <code>scss</code>.\n(De)serialized as <code>sd</code>.\n(De)serialized as <code>sdc</code>.\n(De)serialized as <code>sdl</code>.\n(De)serialized as <code>sed</code>.\n(De)serialized as <code>sensors</code>.\n(De)serialized as <code>services</code>.\n(De)serialized as <code>setserial</code>.\n(De)serialized as <code>sexplib</code>.\n(De)serialized as <code>sgml</code>.\n(De)serialized as <code>sgmldecl</code>.\n(De)serialized as <code>sh</code>.\n(De)serialized as <code>sieve</code>.\n(De)serialized as <code>sil</code>.\n(De)serialized as <code>sile</code>.\n(De)serialized as <code>simula</code>.\n(De)serialized as <code>sinda</code>.\n(De)serialized as <code>sisu</code>.\n(De)serialized as <code>skill</code>.\n(De)serialized as <code>slang</code>.\n(De)serialized as <code>slice</code>.\n(De)serialized as <code>slpconf</code>.\n(De)serialized as <code>slpreg</code>.\n(De)serialized as <code>slpspi</code>.\n(De)serialized as <code>slrnrc</code>.\n(De)serialized as <code>slrnsc</code>.\n(De)serialized as <code>sm</code>.\n(De)serialized as <code>smali</code>.\n(De)serialized as <code>smarty</code>.\n(De)serialized as <code>smcl</code>.\n(De)serialized as <code>smgllnx</code>.\n(De)serialized as <code>smil</code>.\n(De)serialized as <code>smith</code>.\n(De)serialized as <code>smithy</code>.\n(De)serialized as <code>sml</code>.\n(De)serialized as <code>snobol4</code>.\n(De)serialized as <code>solidity</code>.\n(De)serialized as <code>solution</code>.\n(De)serialized as <code>sparql</code>.\n(De)serialized as <code>spec</code>.\n(De)serialized as <code>specman</code>.\n(De)serialized as <code>spice</code>.\n(De)serialized as <code>spup</code>.\n(De)serialized as <code>spyce</code>.\n(De)serialized as <code>sql</code>.\n(De)serialized as <code>sqlj</code>.\n(De)serialized as <code>sqr</code>.\n(De)serialized as <code>squid</code>.\n(De)serialized as <code>squirrel</code>.\n(De)serialized as <code>srec</code>.\n(De)serialized as <code>srt</code>.\n(De)serialized as <code>ssa</code>.\n(De)serialized as <code>sshconfig</code>.\n(De)serialized as <code>sshdconfig</code>.\n(De)serialized as <code>st</code>.\n(De)serialized as <code>starlark</code>.\n(De)serialized as <code>stata</code>.\n(De)serialized as <code>stp</code>.\n(De)serialized as <code>structurizr</code>.\n(De)serialized as <code>sudoers</code>.\n(De)serialized as <code>supercollider</code>.\nA language included in a <code>LanguageSet</code>.\n(De)serialized as <code>surface</code>.\n(De)serialized as <code>svelte</code>.\n(De)serialized as <code>svg</code>.\n(De)serialized as <code>svn</code>.\n(De)serialized as <code>swayconfig</code>.\n(De)serialized as <code>swift</code>.\n(De)serialized as <code>swiftgyb</code>.\n(De)serialized as <code>sysctl</code>.\n(De)serialized as <code>systemverilog</code>.\n(De)serialized as <code>systemd</code>.\n(De)serialized as <code>tablegen</code>.\n(De)serialized as <code>tads</code>.\n(De)serialized as <code>tags</code>.\n(De)serialized as <code>tak</code>.\n(De)serialized as <code>tal</code>.\n(De)serialized as <code>taskdata</code>.\n(De)serialized as <code>taskedit</code>.\n(De)serialized as <code>tcl</code>.\n(De)serialized as <code>tcsh</code>.\n(De)serialized as <code>teal</code>.\n(De)serialized as <code>template</code>.\n(De)serialized as <code>teraterm</code>.\n(De)serialized as <code>terminfo</code>.\n(De)serialized as <code>terraform</code>.\n(De)serialized as <code>terraform-vars</code>, <strong>not</strong> <code>terraformvars</code>.\n(De)serialized as <code>tex</code>.\n(De)serialized as <code>texinfo</code>.\n(De)serialized as <code>texmf</code>.\nA plain text file. This is the default variant. …\n(De)serialized as <code>tf</code>.\n(De)serialized as <code>thrift</code>.\n(De)serialized as <code>tidy</code>.\n(De)serialized as <code>tilde</code>.\n(De)serialized as <code>tla</code>.\n(De)serialized as <code>tli</code>.\n(De)serialized as <code>tmux</code>.\n(De)serialized as <code>toml</code>.\n(De)serialized as <code>tpp</code>.\n(De)serialized as <code>trace32</code>.\n(De)serialized as <code>trasys</code>.\n(De)serialized as <code>query</code>, <strong>not</strong> <code>treesitterquery</code>.\n(De)serialized as <code>treetop</code>.\n(De)serialized as <code>trustees</code>.\n(De)serialized as <code>tsalt</code>.\n(De)serialized as <code>tsscl</code>.\n(De)serialized as <code>tssgm</code>.\n(De)serialized as <code>tssop</code>.\n(De)serialized as <code>tsv</code>.\n(De)serialized as <code>tsx</code>.\n(De)serialized as <code>turtle</code>.\n(De)serialized as <code>tutor</code>.\n(De)serialized as <code>twig</code>.\n(De)serialized as <code>typescript</code>.\n(De)serialized as <code>typescript.glimmer</code>, <strong>not</strong> <code>typescriptglimmer</code>…\n(De)serialized as <code>typst</code>.\n(De)serialized as <code>uc</code>.\n(De)serialized as <code>udevconf</code>.\n(De)serialized as <code>udevperm</code>.\n(De)serialized as <code>udevrules</code>.\n(De)serialized as <code>uil</code>.\n(De)serialized as <code>ungrammar</code>.\nA combination of two arbitrary <code>LanguageSet</code>s into one.\n(De)serialized as <code>updatedb</code>.\n(De)serialized as <code>upstart</code>.\n(De)serialized as <code>upstreamdat</code>.\n(De)serialized as <code>upstreaminstalllog</code>.\n(De)serialized as <code>upstreamlog</code>.\n(De)serialized as <code>urlshortcut</code>.\n(De)serialized as <code>ursa</code>.\n(De)serialized as <code>usserverlog</code>.\n(De)serialized as <code>usd</code>.\n(De)serialized as <code>usw2kagtlog</code>.\n(De)serialized as <code>v</code>.\n(De)serialized as <code>vala</code>.\n(De)serialized as <code>vb</code>.\n(De)serialized as <code>vdf</code>.\n(De)serialized as <code>vdmpp</code>.\n(De)serialized as <code>vdmrt</code>.\n(De)serialized as <code>vdmsl</code>.\n(De)serialized as <code>vera</code>.\n(De)serialized as <code>verilog</code>.\n(De)serialized as <code>verilogams</code>.\n(De)serialized as <code>vgrindefs</code>.\n(De)serialized as <code>vhdl</code>.\n(De)serialized as <code>vhs</code>.\n(De)serialized as <code>vim</code>.\n(De)serialized as <code>help</code>, <strong>not</strong> <code>vimhelp</code>.\n(De)serialized as <code>viminfo</code>.\n(De)serialized as <code>virata</code>.\n(De)serialized as <code>vmasm</code>.\n(De)serialized as <code>voscm</code>.\n(De)serialized as <code>vrml</code>.\n(De)serialized as <code>vroom</code>.\n(De)serialized as <code>vue</code>.\n(De)serialized as <code>wast</code>.\n(De)serialized as <code>wat</code>.\n(De)serialized as <code>wdl</code>.\n(De)serialized as <code>web</code>.\n(De)serialized as <code>webmacro</code>.\n(De)serialized as <code>wget</code>.\n(De)serialized as <code>wget2</code>.\n(De)serialized as <code>winbatch</code>.\n(De)serialized as <code>wit</code>.\n(De)serialized as <code>wml</code>.\n(De)serialized as <code>wsh</code>.\n(De)serialized as <code>wsml</code>.\n(De)serialized as <code>wvdial</code>.\n(De)serialized as <code>xdefaults</code>.\n(De)serialized as <code>xf86conf</code>.\n(De)serialized as <code>xf86conf-3</code>, <strong>not</strong> <code>xf86conf3</code>.\n(De)serialized as <code>xf86conf-4</code>, <strong>not</strong> <code>xf86conf4</code>.\n(De)serialized as <code>xmath</code>.\n(De)serialized as <code>xmodmap</code>.\n(De)serialized as <code>xquery</code>.\n(De)serialized as <code>xbl</code>.\n(De)serialized as <code>xhtml</code>.\n(De)serialized as <code>xinetd</code>.\n(De)serialized as <code>xml</code>.\n(De)serialized as <code>xpm</code>.\n(De)serialized as <code>xpm2</code>.\n(De)serialized as <code>xs</code>.\n(De)serialized as <code>xsd</code>.\n(De)serialized as <code>xslt</code>.\n(De)serialized as <code>yacc</code>.\n(De)serialized as <code>yaml</code>.\n(De)serialized as <code>yang</code>.\n(De)serialized as <code>yuck</code>.\n(De)serialized as <code>z8a</code>.\n(De)serialized as <code>zig</code>.\n(De)serialized as <code>zimbu</code>.\n(De)serialized as <code>zimbutempl</code>.\n(De)serialized as <code>zir</code>.\n(De)serialized as <code>zserio</code>.\n(De)serialized as <code>zsh</code>.\nGet the ABI version number that indicates which version of …\nSet the list of recognized highlight names.\nGet the number of distinct field names in this language.\nGet the numerical id for the given field name.\nGet the field name for the given numerical id.\nFind a language based on the given <code>FileType</code>.\nFind a language for an injection.\nGet the language with the given name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReconstructs a <code>Language</code> from a raw pointer.\nGet the <code>HighlightConfiguration</code> for a given language.\nGet the numeric id for the given node kind.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Language</code>, returning a raw pointer to the …\nGet a reference to the left set.\nCreate a new lookahead iterator for this language and …\nGet the metadata for this language. This information is …\nGet the name for this language.\nGet the name of this language. This returns <code>None</code> in older …\nGet a slice containing all of the highlight names used in …\nCreates a <code>HighlightConfiguration</code> for a given <code>Language</code> and …\nCreate a new <code>Union</code> set by combining <code>left</code> and <code>right</code>.\nGet the next parse state. Combine this with …\nGet the number of distinct node types in this language.\nGet the name of the node kind for the given numerical id.\nCheck if the node type for the given numerical id is named …\nCheck if the node type for the given numerical id is a …\nCheck if the node type for the given numerical id is …\nGet the number of valid states in this language.\nGet a reference to the right set.\nGet a list of all subtype symbols for a given supertype …\nGet a list of all supertype symbols for the language.\nGet the ABI version number that indicates which version of …\nA <code>Renderer</code> implementor for HTML output. Use this type with …\nA <code>Renderer</code> defines how to render <code>Highlights</code> to end users. …\nA <code>Renderer</code> implementor for true-color ANSI terminal …\nIs called for every region of the input, both styled and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIs called at the start of rendering, before anything else. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>HtmlRenderer</code>. Because <code>HtmlRenderer</code> is a unit …\nCreate a new <code>TerminalRenderer</code> with an optional background …\nIs called at the end of every input line. The returned …\nRender the given <code>Highlights</code> with a <code>Renderer</code> and …\nConvert <code>Highlights</code> to <code>ThemedHighlights</code> by applying styles …\nIs called for every styled region of the input.\nIs called at the end of rendering, after the final call to …\nIs called for every unstyled region of the input.\nA non-transparent color with red, green, and blue values …\nDefines how to style a region of text.\nGet this <code>Style</code>’s background <code>Color</code>.\nThe amount of blue light, where 0.0 is no blue light and …\nWhether this <code>Style</code> is bold.\nGet this <code>Style</code>’s foreground <code>Color</code>.\nCreate a new <code>Style</code> with only foreground color information …\nReturns the argument unchanged.\nThe amount of green light, where 0.0 is no green light and …\nCalls <code>U::from(self)</code>.\nWhether this <code>Style</code> is italic.\nCreate a new <code>Style</code>.\nThe amount of red light, where 0.0 is no red light and 1.0 …\nThe kind of RGB standard. sRGB is the default.\nWhether this <code>Style</code> is strikethrough.\nWhether this <code>Style</code> is underlined.\nA color or link with additional style information.\nA <code>Theme</code> where all internal links have been resolved.\nMay either be a hexadecimal color literal, or a <code>$</code> followed …\nAll theme keys that are recognized by syntastica.\nA raw theme which may contain links to other items inside.\nA value of a <code>Theme</code> containing style information and/or a …\nGet the default background color, if the theme defines one.\nGet the default foreground color, if the theme defines one.\nTry to find the best possible style supported by the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the style corresponding to the key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume <code>self</code> and return the contained theme map.\nConsume <code>self</code> and return the contained theme map.\nCreate a new <code>Theme</code> from a map of theme keys to <code>ThemeValue</code>s.\nCreate a new <code>ResolvedTheme</code> from a map of theme keys to …\nTry to resolve all links in this <code>Theme</code> and return a …\nTry to create a <code>ResolvedTheme</code> from a <code>Theme</code> by calling …\nThe background color to use for this style, specified as a …\nWhether the text should be bold. (default is <code>false</code>)\nThe foreground color to use for this style, specified as a …\nWhether the text should be italic. (default is <code>false</code>)\nA link to the theme entry with the given key.\nWhether the text should be strikethrough. (default is <code>false</code>…\nWhether the text should be underlined. (default is <code>false</code>)\nA quantifier for captures\nAn error that occurred in <code>Parser::set_included_ranges</code>.\nA summary of a change to a text document.\nThe type of the elements being iterated over.\nThe latest ABI version that is supported by the current …\nAn opaque object that defines how to parse a particular …\nAn error that occurred when trying to assign an …\nThe metadata associated with a language.\nA type of log message.\nA stateful object that is used to look up symbols valid in …\nThe earliest ABI version that is supported by the current …\nA single node within a syntax <code>Tree</code>.\nA stateful object that is passed into a …\nA stateful object that this is used to produce a <code>Tree</code> …\nA position in a multi-line text document, in terms of rows …\nA set of patterns that match nodes in a syntax tree.\nA particular <code>Node</code> that has been captured with a particular …\nA sequence of <code>QueryCapture</code>s associated with a given …\nA stateful object for executing a <code>Query</code> on a syntax <code>Tree</code>.\nA stateful object that is passed into a …\nAn error that occurred when trying to create a <code>Query</code>.\nA match of a <code>Query</code> to a particular set of <code>Node</code>s.\nA sequence of <code>QueryMatch</code>es associated with a given …\nA key-value pair associated with a particular pattern in a …\nA key-value pair associated with a particular pattern in a …\nA range of positions in a multi-line text document, both …\nAn interface for dealing with streaming iterators.\nAn interface for dealing with mutable streaming iterators.\nA tree that represents the syntactic structure of a source …\nA stateful object for walking a syntax <code>Tree</code> efficiently.\nAdvances the iterator to the next element.\nDetermines if all elements of the iterator satisfy a …\nDetermines if any elements of the iterator satisfy a …\nBorrows an iterator, rather than consuming it.\nGet the byte range of source code that this node …\nGet the parser’s current cancellation flag pointer.\nGet the index for a given capture name.\nGet the names of the captures used in the query.\nGet the quantifiers of the captures used in the query.\nIterate over all of the individual captures in the order …\nIterate over all of the individual captures in the order …\nConsumes two iterators and returns a new iterator that …\nCompare this old edited syntax tree to a new syntax tree …\nGet the node’s child at the given index, where zero …\nGet this node’s child with the given numerical field id.\nGet the first child with the given field name.\nGet this node’s number of children.\nGet the node that contains <code>descendant</code>.\nIterate over this node’s children.\nIterate over this node’s children with a given field id.\nIterate over this node’s children with a given field …\nProduces a normal, non-streaming, iterator by cloning the …\nProduces a normal, non-streaming, iterator by copying the …\nConsumes the iterator, counting the number of remaining …\nGet the current symbol of the lookahead iterator.\nGet the current symbol name of the lookahead iterator.\nA callback that decodes the next code point from the input …\nGet the depth of the cursor’s current node relative to …\nGet the node’s number of descendants, including one for …\nGet the smallest node within this node that spans the …\nGet the smallest node within this node that spans the …\nGet the index of the cursor’s current node out of all of …\nCheck if, on its last execution, this cursor exceeded its …\nDisable a certain capture within a query.\nDisable a certain pattern within a query.\nEdit the syntax tree to keep it in sync with source code …\nEdit this node to keep it in-sync with source code that …\nGet the byte offset where this node ends.\nGet the byte offset where the given pattern ends in the …\nGet this node’s end position in terms of rows and …\nGet the numerical field id of this tree cursor’s current …\nGet the field name of this tree cursor’s current node.\nGet the field name of this node’s child at the given …\nGet the field name of this node’s named child at the …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator which both filters and maps by …\nCreates a regular, non-streaming iterator which both …\nReturns the first element of the iterator that satisfies …\nGet this node’s first child that contains or starts …\nGet this node’s first named child that contains or …\nCreates an iterator which flattens iterators obtained by …\nCreates an iterator which flattens nested streaming …\nReduces the iterator’s elements to a single, final value.\nReduces the iterator’s mutable elements to a single, …\nCalls a closure on each element of an iterator.\nCalls a closure on each mutable element of an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReconstructs a <code>Tree</code> from a raw pointer.\nReconstructs a <code>Parser</code> from a raw pointer.\nReconstructs a <code>LookaheadIterator</code> from a raw pointer.\nReconstructs a <code>ParseState</code> from a raw pointer\nReconstructs a <code>QueryCursorState</code> from a raw pointer.\nReconstructs a <code>TreeCursor</code> from a raw pointer.\nReconstructs a <code>QueryCursor</code> from a raw pointer.\nReconstructs a <code>Node</code> from a raw pointer.\nReconstructs a <code>Query</code> from a raw pointer.\nCreates an iterator which is “well behaved” at the …\nGet the other user-defined predicates associated with the …\nReturns a reference to the current element of the iterator.\nReturns a mutable reference to the current element of the …\nMove the cursor to the node that is the nth descendant of …\nMove this cursor to the first child of its current node.\nMove this cursor to the first child of its current node …\nMove this cursor to the first child of its current node …\nMove this cursor to the last child of its current node.\nMove this cursor to the next sibling of its current node.\nMove this cursor to the parent of its current node.\nMove this cursor to the previous sibling of its current …\nGet the node’s type as a numerical id as it appears in …\nGet this node’s symbol name as it appears in the grammar …\nCheck if this node has been edited.\nCheck if this node represents a syntax error or contains …\nGet a numeric id for this node that is unique.\nGet the included ranges that were used to parse the syntax …\nGet the ranges of text that the parser will include when …\nCall a closure on each element, passing the element on. …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Tree</code>, returning a raw pointer to the …\nConsumes the <code>Parser</code>, returning a raw pointer to the …\nConsumes the <code>LookaheadIterator</code>, returning a raw pointer to …\nConsumes the <code>ParseState</code>, returning a raw pointer to the …\nConsumes the <code>QueryCursorState</code>, returning a raw pointer to …\nConsumes the <code>TreeCursor</code>, returning a raw pointer to the …\nConsumes the <code>QueryCursor</code>, returning a raw pointer to the …\nConsumes the <code>Node</code>, returning a raw pointer to the …\nConsumes the <code>Query</code>, returning a raw pointer to the …\nChecks if <code>get()</code> will return <code>None</code>.\nCheck if this node represents a syntax error.\nCheck if this node is <em>extra</em>.\nCheck if this node is <em>missing</em>.\nCheck if this node is <em>named</em>.\nCheck if a given step in a query is ‘definite’.\nCheck if a given pattern within a query has a single root …\nCheck if a given pattern within a query has a single root …\nIterate symbol names.\nGet this node’s type as a string.\nGet this node’s type as a numerical id.\nGet the language that was used to parse the syntax tree.\nGet the parser’s current language.\nGet the current language of the lookahead iterator.\nGet the <code>Language</code> that was used to parse this node’s …\nGet the parser’s current logger.\nCreates an iterator which transforms elements of this …\nCreates a regular, non-streaming iterator which transforms …\nCreates a regular, non-streaming iterator which transforms …\nCreates an iterator which transforms elements of this …\nReturn the maximum number of in-progress matches for this …\nIterate over all of the matches in the order that they …\nIterate over all of the matches in the order that they …\nGet this node’s <em>named</em> child at the given index.\nGet this node’s number of <em>named</em> children.\nIterate over this node’s named children.\nGet the smallest named node within this node that spans …\nGet the smallest named node within this node that spans …\nCreate a new parser.\nCreate a new cursor for executing a given query.\nCreate a new query from a string containing one or more …\nAdvances the iterator and returns the next value.\nAdvances the iterator and returns the next mutable value.\nGet this node’s next named sibling.\nGet the parse state after this node.\nGet this node’s next sibling.\nGet the tree cursor’s current <code>Node</code>.\nConsumes the first <code>n</code> elements of the iterator, returning …\nGet this node’s immediate parent. Prefer …\nParse a slice of UTF8 text.\nParse text provided in chunks by a callback using a custom …\nGet this node’s parse state.\nParse a slice of UTF16 text.\nParse a slice of UTF16 big-endian text.\nParse UTF16 big-endian text provided in chunks by a …\nParse a slice of UTF16 little-endian text.\nParse UTF16 little-endian text provided in chunks by a …\nParse UTF16 text provided in chunks by a callback.\nParse UTF8 text provided in chunks by a callback.\nParse text provided in chunks by a callback.\nGet the number of patterns in the query.\nReturns the index of the first element of the iterator …\nGet this node’s previous named sibling.\nGet this node’s previous sibling.\nPrint a graph of the tree to the given file descriptor. …\nSet the destination to which the parser should write …\nGet the properties that are checked for the given pattern …\nGet the properties that are set for the given pattern …\nGet the range of source code that this node represents, …\nInstruct the parser to start the next parse from the …\nReset the lookahead iterator.\nRe-initialize this tree cursor to start at the original …\nReset the lookahead iterator to another state.\nRe-initialize a tree cursor to the same position as …\nCreates an iterator which returns elemens in the opposite …\nGet the root node of the syntax tree.\nGet the root node of the syntax tree, but with its …\nSets the memory allocation functions that the core library …\nSet the range in which the query will be executed, in …\nSet the parser’s current cancellation flag pointer.\nSet the ranges of text that the parser should include when …\nSet the language that the parser should use for parsing.\nSet the logging callback that the parser should use during …\nSet the maximum number of in-progress matches for this …\nSet the maximum start depth for a query cursor.\nSet the range in which the query will be executed, in …\nSet the maximum duration in microseconds that parsing …\nSet the maximum duration in microseconds that query …\nReturns the bounds on the remaining length of the iterator.\nCreates an iterator which skips the first <code>n</code> elements.\nCreates an iterator that skips initial elements matching a …\nGet the byte offset where this node starts.\nGet the byte offset where the given pattern starts in the …\nGet this node’s start position in terms of rows and …\nStop the parser from printing debugging graphs while …\nCreates an iterator which only returns the first <code>n</code> …\nCreates an iterator which only returns initial elements …\nGet the duration in microseconds that parsing is allowed …\nGet the duration in microseconds that query execution is …\nGet an S-expression representing the node.\nCreate a new <code>TreeCursor</code> starting from the root of the tree.\nCreate a new <code>TreeCursor</code> starting from this node.\nNo value.\nSome value of type <code>T</code>.\nThe metadata associated with a language.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the ABI version number for this language. This version …\nGet another reference to the given language.\nFree any dynamically-allocated resources for this …\nGet the number of distinct field names in the language.\nGet the numerical id for the given field name string.\nGet the field name string for the given numerical id.\nCheck if the language came from a Wasm module. If so, then …\nGet the metadata for this language. This information is …\nGet the name of this language. This returns <code>NULL</code> in older …\nGet the next parse state. Combine this with lookahead …\nGet the number of valid states in this language.\nGet a list of all subtype symbol ids for a given supertype …\nGet a list of all supertype symbols for the language.\nGet the number of distinct node types in the language.\nGet the numerical id for the given node type string.\nGet a node type string for the given numerical id.\nCheck whether the given node type id belongs to named …\n@deprecated use <code>ts_language_abi_version</code> instead, this will …\nGet the current symbol of the lookahead iterator;\nGet the current symbol type of the lookahead iterator as a …\nDelete a lookahead iterator freeing all the memory used.\nGet the current language of the lookahead iterator.\nCreate a new lookahead iterator for the given language and …\nAdvance the lookahead iterator to the next symbol.\nReset the lookahead iterator.\nReset the lookahead iterator to another state.\nGet the node’s child at the given index, where zero …\nGet the node’s child with the given numerical field id.\nGet the node’s child with the given field name.\nGet the node’s number of children.\nGet the node that contains <code>descendant</code>.\nGet the node’s number of descendants, including one for …\nGet the smallest node within this node that spans the …\nEdit the node to keep it in-sync with source code that has …\nGet the node’s end byte.\nGet the node’s end position in terms of rows and columns.\nCheck if two nodes are identical.\nGet the field name for node’s child at the given index, …\nGet the field name for node’s named child at the given …\nGet the node’s first child that contains or starts after …\nGet the node’s first named child that contains or starts …\nGet the node’s type as a numerical id as it appears in …\nGet the node’s type as it appears in the grammar …\nCheck if a syntax node has been edited.\nCheck if the node is a syntax error or contains any syntax …\nCheck if the node is a syntax error.\nCheck if the node is <em>extra</em>. Extra nodes represent things …\nCheck if the node is <em>missing</em>. Missing nodes are inserted …\nCheck if the node is <em>named</em>. Named nodes correspond to …\nCheck if the node is null. Functions like <code>ts_node_child</code> and\nGet the node’s language.\nGet the node’s <em>named</em> child at the given index.\nGet the node’s number of <em>named</em> children.\nGet the smallest named node within this node that spans …\nGet the node’s next / previous <em>named</em> sibling.\nGet the parse state after this node.\nGet the node’s next / previous sibling.\nGet the node’s immediate parent. Prefer …\nGet this node’s parse state.\nGet the node’s start byte.\nGet the node’s start position in terms of rows and …\nGet an S-expression representing the node as a string.\nGet the node’s type as a numerical id.\nGet the node’s type as a null-terminated string.\n@deprecated use <code>ts_parser_parse_with_options</code> and pass in a …\nDelete the parser, freeing all of the memory that it used.\nGet the ranges of text that the parser will include when …\nGet the parser’s current language.\nGet the parser’s current logger.\nCreate a new parser.\nUse the parser to parse some source code and create a …\nUse the parser to parse some source code stored in one …\nUse the parser to parse some source code stored in one …\nUse the parser to parse some source code and create a …\nSet the file descriptor to which the parser should write …\nInstruct the parser to start the next parse from the …\n@deprecated use <code>ts_parser_parse_with_options</code> and pass in a …\nSet the ranges of text that the parser should include when …\nSet the language that the parser should use for parsing.\nSet the logger that a parser should use during parsing.\n@deprecated use <code>ts_parser_parse_with_options</code> and pass in a …\nAssign the given Wasm store to the parser. A parser must …\nRemove the parser’s current Wasm store and return it. …\n@deprecated use <code>ts_parser_parse_with_options</code> and pass in a …\nGet the name and length of one of the query’s captures, …\nGet the quantifier of the query’s captures. Each capture …\nDelete a query cursor, freeing all of the memory that it …\nManage the maximum number of in-progress matches allowed …\nStart running a given query on a given node.\nStart running a given query on a given node, with some …\nCreate a new cursor for executing a given query.\nAdvance to the next capture of the currently running query.\nAdvance to the next match of the currently running query.\nSet the range of bytes in which the query will be executed.\nSet the maximum start depth for a query cursor.\nSet the range of (row, column) positions in which the …\n@deprecated use <code>ts_query_cursor_exec_with_options</code> and pass …\n@deprecated use <code>ts_query_cursor_exec_with_options</code> and pass …\nDelete a query, freeing all of the memory that it used.\nDisable a certain capture within a query.\nDisable a certain pattern within a query.\nGet the byte offset where the given pattern ends in the …\nCreate a new query from a string containing one or more …\nGet the number of patterns, captures, or string literals …\nGet all of the predicates for the given pattern in the …\nGet the byte offset where the given pattern starts in the …\nSet the allocation functions used by the library.\nCreate a shallow copy of the syntax tree. This is very …\nGet the depth of the cursor’s current node relative to …\nGet the index of the cursor’s current node out of all of …\nGet the field id of the tree cursor’s current node.\nGet the field name of the tree cursor’s current node.\nGet the tree cursor’s current node.\nDelete a tree cursor, freeing all of the memory that it …\nMove the cursor to the node that is the nth descendant of …\nMove the cursor to the first child of its current node.\nMove the cursor to the first child of its current node …\nMove the cursor to the last child of its current node.\nMove the cursor to the next sibling of its current node.\nMove the cursor to the parent of its current node.\nMove the cursor to the previous sibling of its current …\nCreate a new tree cursor starting from the given node.\nRe-initialize a tree cursor to start at the original node …\nRe-initialize a tree cursor to the same position as …\nDelete the syntax tree, freeing all of the memory that it …\nEdit the syntax tree to keep it in sync with source code …\nCompare an old edited syntax tree to a new syntax tree …\nGet the array of included ranges that was used to parse …\nGet the language that was used to parse the syntax tree.\nWrite a DOT graph describing the syntax tree to the given …\nGet the root node of the syntax tree.\nGet the root node of the syntax tree, but with its position\nFree the memory associated with the given Wasm store.\nGet the number of languages instantiated in the given wasm …\nCreate a language from a buffer of Wasm. The resulting …\nCreate a Wasm store.")
searchState.loadedDescShard("lua_pattern", 0, "<code>lua-pattern</code>\nMatches any alphanumeric character (digit or letter); …\nMatch any character (<code>.</code>).\n<code>.</code>\nA balanced pattern (eg. <code>%bxy</code>). Matches all characters …\n<code>%b</code>\nThe input pattern includes a balanced pattern (eg. <code>%b{}</code>) …\nA capture group with a numeric ID and the contained <code>Pattern</code>…\nA reference to a previous capture group (eg. <code>%1</code>).\nA reference to a previous capture group\nThe input pattern includes a capture backreference (eg. <code>%1</code>…\nA character to match literally (eg. <code>a</code>).\nA literal character\nA character class, matching any character contained in the …\nA character class (eg. <code>%w</code>, <code>%L</code>).\nA character class (eg. <code>%w</code>, <code>%L</code>).\nA character class\nMatches any control character; equivalent to <code>[\\0-\\31]</code> (<code>%c</code>).\nMatches any digit; equivalent to <code>[0-9]</code> (<code>%d</code>).\nMatch the end of the string (<code>$</code>).\n<code>$</code>\nEnd of file\nContains the error value\nThe crate’s main error type.\nAn escaped character to match literally (eg. <code>%%</code>).\nAn escaped character to match literally (eg. <code>%%</code>, <code>%]</code>).\nAn escaped character\nA frontier pattern (eg. <code>%f[a-z]</code>). Matches if the following …\n<code>%f</code>\nThe input pattern includes a frontier pattern (eg. <code>%f[a-z]</code>…\nMatches any hexadecimal digit; equivalent to <code>[0-9a-fA-F]</code> (…\nA capture group backreference referenced a group that does …\n<code>^</code> in a set\n<code>[</code>\n<code>(</code>\nMatches any letter; equivalent to <code>[a-zA-Z]</code> (<code>%a</code>).\nMatches any lowercase letter; equivalent to <code>[a-z]</code> (<code>%l</code>).\nA balanced pattern <code>%b</code> was present without two characters …\nA frontier pattern <code>%f</code> was present without a character set …\nMatches any character, <strong>except</strong> all alphanumeric characters …\nMatches any character, <strong>except</strong> all control characters; …\nMatches any character, <strong>except</strong> all digits; equivalent to …\nMatches any character, <strong>except</strong> all hexadecimal digits; …\nMatches any character, <strong>except</strong> all letters; equivalent to …\nMatches any character, <strong>except</strong> all lowercase letters; …\nMatches any character, <strong>except</strong> all printable characters, …\nMatches any character, <strong>except</strong> all punctuation characters; …\nMatches any character, <strong>except</strong> all whitespace characters; …\nMatches any character, <strong>except</strong> all uppercase letters; …\nMatches the character, <strong>except</strong> the NULL character / <code>0</code> byte; …\nContains the success value\nAllow one or more occurrences, taking the longest matching …\n<code>+</code>\nA character range in a character set is missing its upper …\nA list of <code>PatternObject</code>s, representing an entire Lua …\nA single object of a Lua pattern.\nMatches any printable character except space; equivalent …\nMatches any punctuation character; equivalent to …\nA quantifier, specifying the amount of times the leading …\nA <code>PatternObject</code> followed by a <code>Quantifier</code> (eg. <code>a?</code>, <code>.*</code>).\n<code>]</code>\n<code>)</code>\nA range of characters (eg. <code>a-z</code>). Matches if any character …\nThe default result type. The error variant is <code>Error</code>.\nA set of <code>SetPatternObject</code>s (eg. <code>[a-z_%u]</code>, <code>[^a-z_%u]</code>), the …\nAn entry of a set.\nMatches any whitespace character; equivalent to …\nMatch the start of the string (<code>^</code>).\n<code>^</code>\nA sequence of characters to match literally (eg. …\nThe error type for errors that can occur during conversion …\nA token as used by the internal lexer. Exposed to the …\nThe closing bracket <code>]</code> for a character set is missing.\nThe input contained an unexpected token, such as an extra …\nThe input ended with a single <code>%</code> character.\nMatches any uppercase letter; equivalent to <code>[A-Z]</code> (<code>%u</code>).\nMatches the NULL character / <code>0</code> byte; equivalent to <code>\\0</code> (<code>%z</code>).\nAllow zero or more occurrences, taking the longest …\n<code>*</code>\nAllow zero or more occurrences, taking the shortest …\n<code>-</code>\nAllow zero or one occurrences (<code>?</code>).\n<code>?</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse the given input string as a Lua pattern.\nTry to convert a parsed Lua pattern into a regular …")